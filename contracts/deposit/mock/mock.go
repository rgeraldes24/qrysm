package mock

import (
	"math/big"
	"strings"

	dilithium2 "github.com/theQRL/go-qrllib/dilithium"
	"github.com/theQRL/go-zond/accounts/abi"
	"github.com/theQRL/go-zond/accounts/abi/bind"
	"github.com/theQRL/go-zond/accounts/abi/bind/backends"
	"github.com/theQRL/go-zond/common"
	"github.com/theQRL/go-zond/core"
	"github.com/theQRL/go-zond/core/types"
	"github.com/theQRL/go-zond/pqcrypto"
	"github.com/theQRL/qrysm/v4/contracts/deposit"
)

var (
	// amount40000Eth     = "40000000000000000000000"
	amount40000Eth     = "40000000000000000000000000"
	amountLessThan1Eth = "500000000000000000"
	depositContractBin = "0x60806040523480156200001157600080fd5b5060005b600160206200002591906200014d565b8110156200010d5760026021826020811062000046576200004562000188565b5b0154602183602081106200005f576200005e62000188565b5b015460405160200162000074929190620001e6565b6040516020818303038152906040526040516200009291906200028f565b602060405180830381855afa158015620000b0573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190620000d59190620002de565b6021600183620000e6919062000310565b60208110620000fa57620000f962000188565b5b0181905550808060010191505062000015565b506200034b565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006200015a8262000114565b9150620001678362000114565b92508282039050818111156200018257620001816200011e565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000819050919050565b6000819050919050565b620001e0620001da82620001b7565b620001c1565b82525050565b6000620001f48285620001cb565b602082019150620002068284620001cb565b6020820191508190509392505050565b600081519050919050565b600081905092915050565b60005b838110156200024c5780820151818401526020810190506200022f565b60008484015250505050565b6000620002658262000216565b62000271818562000221565b9350620002838185602086016200022c565b80840191505092915050565b60006200029d828462000258565b915081905092915050565b600080fd5b620002b881620001b7565b8114620002c457600080fd5b50565b600081519050620002d881620002ad565b92915050565b600060208284031215620002f757620002f6620002a8565b5b60006200030784828501620002c7565b91505092915050565b60006200031d8262000114565b91506200032a8362000114565b92508282019050808211156200034557620003446200011e565b5b92915050565b61198c806200035b6000396000f3fe60806040526004361061003f5760003560e01c806301ffc9a7146100445780632289511814610081578063621fd1301461009d578063c5f2892f146100c8575b600080fd5b34801561005057600080fd5b5061006b60048036038101906100669190610bfc565b6100f3565b6040516100789190610c44565b60405180910390f35b61009b60048036038101906100969190610cfa565b6101c5565b005b3480156100a957600080fd5b506100b2610675565b6040516100bf9190610e53565b60405180910390f35b3480156100d457600080fd5b506100dd610687565b6040516100ea9190610e84565b60405180910390f35b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806101be57507f85640907000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b610a20878790501461020c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020390610f22565b60405180910390fd5b60208585905014610252576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024990610fb4565b60405180910390fd5b6111f38383905014610299576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161029090611046565b60405180910390fd5b670de0b6b3a76400003410156102e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102db906110d8565b60405180910390fd5b6000633b9aca00346102f69190611131565b14610336576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161032d906111d4565b60405180910390fd5b6000633b9aca00346103489190611223565b905067ffffffffffffffff8016811115610397576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038e906112c6565b60405180910390fd5b60006103a282610862565b90507f649bbc62d0e31342afea4e5cd82d4049e7e1ee912fc0889aa790803be39038c589898989858a8a6103d7602054610862565b6040516103eb989796959493929190611322565b60405180910390a1600089898989858a8a60405160200161041297969594939291906113ff565b6040516020818303038152906040529050600080600173ffffffffffffffffffffffffffffffffffffffff168360405161044c9190611443565b600060405180830381855afa9150503d8060008114610487576040519150601f19603f3d011682016040523d82523d6000602084013e61048c565b606091505b50915091508161049b57600080fd5b6000818060200190518101906104b1919061146f565b90508681146104f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ec90611534565b60405180910390fd5b6001602060026105059190611687565b61050f91906116d2565b60205410610552576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054990611778565b60405180910390fd5b6001602060008282546105659190611798565b925050819055506000602054905060005b6020811015610654576001808316036105b057826000826020811061059e5761059d6117cc565b5b0181905550505050505050505061066c565b6002600082602081106105c6576105c56117cc565b5b0154846040516020016105da92919061181c565b6040516020818303038152906040526040516105f69190611443565b602060405180830381855afa158015610613573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190610636919061146f565b92506002826106459190611223565b91508080600101915050610576565b50600061066457610663611848565b5b505050505050505b50505050505050565b6060610682602054610862565b905090565b6000806000602054905060005b60208110156107d957600180831603610734576002600082602081106106bd576106bc6117cc565b5b0154846040516020016106d192919061181c565b6040516020818303038152906040526040516106ed9190611443565b602060405180830381855afa15801561070a573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061072d919061146f565b92506107bd565b6002836021836020811061074b5761074a6117cc565b5b015460405160200161075e92919061181c565b60405160208183030381529060405260405161077a9190611443565b602060405180830381855afa158015610797573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906107ba919061146f565b92505b6002826107ca9190611223565b91508080600101915050610694565b506002826107e8602054610862565b600060401b6040516020016107ff939291906118c4565b60405160208183030381529060405260405161081b9190611443565b602060405180830381855afa158015610838573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061085b919061146f565b9250505090565b6060600867ffffffffffffffff81111561087f5761087e6118fd565b5b6040519080825280601f01601f1916602001820160405280156108b15781602001600182028036833780820191505090505b50905060008260c01b9050806007600881106108d0576108cf6117cc565b5b1a60f81b826000815181106108e8576108e76117cc565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508060066008811061092b5761092a6117cc565b5b1a60f81b82600181518110610943576109426117cc565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080600560088110610986576109856117cc565b5b1a60f81b8260028151811061099e5761099d6117cc565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350806004600881106109e1576109e06117cc565b5b1a60f81b826003815181106109f9576109f86117cc565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080600360088110610a3c57610a3b6117cc565b5b1a60f81b82600481518110610a5457610a536117cc565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080600260088110610a9757610a966117cc565b5b1a60f81b82600581518110610aaf57610aae6117cc565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080600160088110610af257610af16117cc565b5b1a60f81b82600681518110610b0a57610b096117cc565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080600060088110610b4d57610b4c6117cc565b5b1a60f81b82600781518110610b6557610b646117cc565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535050919050565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610bd981610ba4565b8114610be457600080fd5b50565b600081359050610bf681610bd0565b92915050565b600060208284031215610c1257610c11610b9a565b5b6000610c2084828501610be7565b91505092915050565b60008115159050919050565b610c3e81610c29565b82525050565b6000602082019050610c596000830184610c35565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610c8457610c83610c5f565b5b8235905067ffffffffffffffff811115610ca157610ca0610c64565b5b602083019150836001820283011115610cbd57610cbc610c69565b5b9250929050565b6000819050919050565b610cd781610cc4565b8114610ce257600080fd5b50565b600081359050610cf481610cce565b92915050565b60008060008060008060006080888a031215610d1957610d18610b9a565b5b600088013567ffffffffffffffff811115610d3757610d36610b9f565b5b610d438a828b01610c6e565b9750975050602088013567ffffffffffffffff811115610d6657610d65610b9f565b5b610d728a828b01610c6e565b9550955050604088013567ffffffffffffffff811115610d9557610d94610b9f565b5b610da18a828b01610c6e565b93509350506060610db48a828b01610ce5565b91505092959891949750929550565b600081519050919050565b600082825260208201905092915050565b60005b83811015610dfd578082015181840152602081019050610de2565b60008484015250505050565b6000601f19601f8301169050919050565b6000610e2582610dc3565b610e2f8185610dce565b9350610e3f818560208601610ddf565b610e4881610e09565b840191505092915050565b60006020820190508181036000830152610e6d8184610e1a565b905092915050565b610e7e81610cc4565b82525050565b6000602082019050610e996000830184610e75565b92915050565b600082825260208201905092915050565b7f4465706f736974436f6e74726163743a20696e76616c6964207075626b65792060008201527f6c656e6774680000000000000000000000000000000000000000000000000000602082015250565b6000610f0c602683610e9f565b9150610f1782610eb0565b604082019050919050565b60006020820190508181036000830152610f3b81610eff565b9050919050565b7f4465706f736974436f6e74726163743a20696e76616c6964207769746864726160008201527f77616c5f63726564656e7469616c73206c656e67746800000000000000000000602082015250565b6000610f9e603683610e9f565b9150610fa982610f42565b604082019050919050565b60006020820190508181036000830152610fcd81610f91565b9050919050565b7f4465706f736974436f6e74726163743a20696e76616c6964207369676e61747560008201527f7265206c656e6774680000000000000000000000000000000000000000000000602082015250565b6000611030602983610e9f565b915061103b82610fd4565b604082019050919050565b6000602082019050818103600083015261105f81611023565b9050919050565b7f4465706f736974436f6e74726163743a206465706f7369742076616c7565207460008201527f6f6f206c6f770000000000000000000000000000000000000000000000000000602082015250565b60006110c2602683610e9f565b91506110cd82611066565b604082019050919050565b600060208201905081810360008301526110f1816110b5565b9050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061113c826110f8565b9150611147836110f8565b92508261115757611156611102565b5b828206905092915050565b7f4465706f736974436f6e74726163743a206465706f7369742076616c7565206e60008201527f6f74206d756c7469706c65206f66206777656900000000000000000000000000602082015250565b60006111be603383610e9f565b91506111c982611162565b604082019050919050565b600060208201905081810360008301526111ed816111b1565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061122e826110f8565b9150611239836110f8565b92508261124957611248611102565b5b828204905092915050565b7f4465706f736974436f6e74726163743a206465706f7369742076616c7565207460008201527f6f6f206869676800000000000000000000000000000000000000000000000000602082015250565b60006112b0602783610e9f565b91506112bb82611254565b604082019050919050565b600060208201905081810360008301526112df816112a3565b9050919050565b82818337600083830152505050565b60006113018385610dce565b935061130e8385846112e6565b61131783610e09565b840190509392505050565b600060a082019050818103600083015261133d818a8c6112f5565b9050818103602083015261135281888a6112f5565b905081810360408301526113668187610e1a565b9050818103606083015261137b8185876112f5565b9050818103608083015261138f8184610e1a565b90509998505050505050505050565b600081905092915050565b60006113b5838561139e565b93506113c28385846112e6565b82840190509392505050565b60006113d982610dc3565b6113e3818561139e565b93506113f3818560208601610ddf565b80840191505092915050565b600061140c82898b6113a9565b91506114198287896113a9565b915061142582866113ce565b91506114328284866113a9565b915081905098975050505050505050565b600061144f82846113ce565b915081905092915050565b60008151905061146981610cce565b92915050565b60006020828403121561148557611484610b9a565b5b60006114938482850161145a565b91505092915050565b7f4465706f736974436f6e74726163743a207265636f6e7374727563746564204460008201527f65706f7369744461746120646f6573206e6f74206d6174636820737570706c6960208201527f6564206465706f7369745f646174615f726f6f74000000000000000000000000604082015250565b600061151e605483610e9f565b91506115298261149c565b606082019050919050565b6000602082019050818103600083015261154d81611511565b9050919050565b60008160011c9050919050565b6000808291508390505b60018511156115ab57808604811115611587576115866111f4565b5b60018516156115965780820291505b80810290506115a485611554565b945061156b565b94509492505050565b6000826115c45760019050611680565b816115d25760009050611680565b81600181146115e857600281146115f257611621565b6001915050611680565b60ff841115611604576116036111f4565b5b8360020a91508482111561161b5761161a6111f4565b5b50611680565b5060208310610133831016604e8410600b84101617156116565782820a905083811115611651576116506111f4565b5b611680565b6116638484846001611561565b9250905081840481111561167a576116796111f4565b5b81810290505b9392505050565b6000611692826110f8565b915061169d836110f8565b92506116ca7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846115b4565b905092915050565b60006116dd826110f8565b91506116e8836110f8565b9250828203905081811115611700576116ff6111f4565b5b92915050565b7f4465706f736974436f6e74726163743a206d65726b6c6520747265652066756c60008201527f6c00000000000000000000000000000000000000000000000000000000000000602082015250565b6000611762602183610e9f565b915061176d82611706565b604082019050919050565b6000602082019050818103600083015261179181611755565b9050919050565b60006117a3826110f8565b91506117ae836110f8565b92508282019050808211156117c6576117c56111f4565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000819050919050565b61181661181182610cc4565b6117fb565b82525050565b60006118288285611805565b6020820191506118388284611805565b6020820191508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000082169050919050565b6000819050919050565b6118be6118b982611877565b6118a3565b82525050565b60006118d08286611805565b6020820191506118e082856113ce565b91506118ec82846118ad565b601882019150819050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea26469706673582212206225408b57ee58025a7b24c458b7ee467edb40215dad85795b0b45558382af3164736f6c63782c302e382e32332d646576656c6f702e323032342e312e31362b636f6d6d69742e33313739313234622e6d6f64005d"
)

// TestAccount represents a test account in the simulated backend,
// through which we can perform actions on the eth1.0 chain.
type TestAccount struct {
	Addr         common.Address
	ContractAddr common.Address
	Contract     *deposit.DepositContract
	Backend      *backends.SimulatedBackend
	TxOpts       *bind.TransactOpts
}

// Setup creates the simulated backend with the deposit contract deployed
func Setup() (*TestAccount, error) {
	genesis := make(core.GenesisAlloc)
	dilithiumKey, err := pqcrypto.GenerateDilithiumKey()
	if err != nil {
		return nil, err
	}

	// strip off the 0x and the first 2 characters 04 which is always the EC prefix and is not required.
	publicKeyBytes := dilithiumKey.GetPK()
	var pubKey = make([]byte, dilithium2.CryptoPublicKeyBytes)
	copy(pubKey, publicKeyBytes[:])

	addr := dilithiumKey.GetAddress()
	txOpts, err := bind.NewKeyedTransactorWithChainID(dilithiumKey, big.NewInt(1337))
	if err != nil {
		return nil, err
	}
	startingBalance, _ := new(big.Int).SetString("100000000000000000000000000000000000000", 10)
	genesis[addr] = core.GenesisAccount{Balance: startingBalance}
	backend := backends.NewSimulatedBackend(genesis, 210000000000)

	contractAddr, _, contract, err := DeployDepositContract(txOpts, backend)
	if err != nil {
		return nil, err
	}
	backend.Commit()

	return &TestAccount{addr, contractAddr, contract, backend, txOpts}, nil
}

// Amount40000Eth returns 40000Eth(in wei) in terms of the big.Int type.
func Amount40000Eth() *big.Int {
	amount, _ := new(big.Int).SetString(amount40000Eth, 10)
	return amount
}

// LessThan1Eth returns less than 1 Eth(in wei) in terms of the big.Int type.
func LessThan1Eth() *big.Int {
	amount, _ := new(big.Int).SetString(amountLessThan1Eth, 10)
	return amount
}

// DeployDepositContract deploys a new Ethereum contract, binding an instance of DepositContract to it.
func DeployDepositContract(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *deposit.DepositContract, error) {
	parsed, err := abi.JSON(strings.NewReader(deposit.DepositContractABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(depositContractBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &deposit.DepositContract{
		DepositContractCaller:     deposit.NewDepositContractCallerFromBoundContract(contract),
		DepositContractTransactor: deposit.NewDepositContractTransactorFromBoundContract(contract),
		DepositContractFilterer:   deposit.NewDepositContractFiltererFromBoundContract(contract),
	}, nil
}
