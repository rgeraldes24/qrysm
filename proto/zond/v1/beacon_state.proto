// Copyright 2020 Prysmatic Labs.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";

package theqrl.zond.v1;

import "google/protobuf/descriptor.proto";

import "proto/zond/ext/options.proto";
import "proto/zond/v1/attestation.proto";
import "proto/zond/v1/beacon_block.proto";
import "proto/zond/v1/sync_committee.proto";
import "proto/zond/v1/validator.proto";
import "proto/zond/v1/version.proto";
import "proto/engine/v1/execution_engine.proto";

option csharp_namespace = "TheQRL.Zond.V1";
option go_package = "github.com/theQRL/qrysm/v4/proto/zond/v1";
option java_multiple_files = true;
option java_outer_classname = "BeaconStateProto";
option java_package = "org.theqrl.zond.v1";
option php_namespace = "TheQRL\\Zond\\v1";

message BeaconState {
  // Versioning [1001-2000]
  uint64 genesis_time = 1001;
  bytes genesis_validators_root = 1002 [(theqrl.zond.ext.ssz_size) = "32"];
  uint64 slot = 1003 [(theqrl.zond.ext.cast_type) = "github.com/theQRL/qrysm/v4/consensus-types/primitives.Slot"];
  Fork fork = 1004;

  // History [2001-3000]
  BeaconBlockHeader latest_block_header = 2001;
  repeated bytes block_roots = 2002 [(theqrl.zond.ext.ssz_size) = "block_roots.size"];
  repeated bytes state_roots = 2003 [(theqrl.zond.ext.ssz_size) = "state_roots.size"];
  repeated bytes historical_roots = 2004 [(theqrl.zond.ext.ssz_size) = "?,32", (theqrl.zond.ext.ssz_max)  = "16777216"];

  // Zond1 [3001-4000]
  Zond1Data zond1_data = 3001;
  repeated Zond1Data zond1_data_votes = 3002 [(theqrl.zond.ext.ssz_max) = "zond1_data_votes.size"];
  uint64 zond1_deposit_index = 3003;

  // Registry [4001-5000]
  repeated Validator validators = 4001 [(theqrl.zond.ext.ssz_max) = "1099511627776"];
  repeated uint64 balances = 4002 [(theqrl.zond.ext.ssz_max) = "1099511627776"];

  // Randomness [5001-6000]
  repeated bytes randao_mixes = 5001 [(theqrl.zond.ext.ssz_size) = "randao_mixes.size"];

  // Slashings [6001-7000]
  repeated uint64 slashings = 6001 [(theqrl.zond.ext.ssz_size) = "slashings.size"];

  // Participation [7001-8000]
  bytes previous_epoch_participation = 7001 [(theqrl.zond.ext.ssz_max) = "1099511627776"];
  bytes current_epoch_participation = 7002 [(theqrl.zond.ext.ssz_max) = "1099511627776"];

  // Finality [8001-9000]
  // Spec type [4]Bitvector which means this would be a fixed size of 4 bits.
  bytes justification_bits = 8001 [(theqrl.zond.ext.ssz_size) = "1", (theqrl.zond.ext.cast_type) = "github.com/theQRL/go-bitfield.Bitvector4"];
  Checkpoint previous_justified_checkpoint = 8002;
  Checkpoint current_justified_checkpoint = 8003;
  Checkpoint finalized_checkpoint = 8004;

  // Sync fields [9001-10000]
  repeated uint64 inactivity_scores = 9001 [(theqrl.zond.ext.ssz_max) = "1099511627776"];
  SyncCommittee current_sync_committee = 9002; 
  SyncCommittee next_sync_committee = 9003;

  // Execution fields [10001-11000]
  theqrl.engine.v1.ExecutionPayloadHeader latest_execution_payload_header = 10001;

  // Capella fields [11001-12000]
  uint64 next_withdrawal_index = 11001;
  uint64 next_withdrawal_validator_index = 11002 [(theqrl.zond.ext.cast_type) = "github.com/theQRL/qrysm/v4/consensus-types/primitives.ValidatorIndex"];

  repeated HistoricalSummary historical_summaries = 11003 [(theqrl.zond.ext.ssz_max) = "16777216"];
}

message HistoricalSummary {
  bytes block_summary_root = 1 [(theqrl.zond.ext.ssz_size) = "32"];
  bytes state_summary_root = 2 [(theqrl.zond.ext.ssz_size) = "32"];
}

message PendingAttestation {
  // Bitfield representation of validator indices that have voted exactly
  // the same vote and have been included into this attestation.
  bytes participation_bits = 1 [(theqrl.zond.ext.ssz_max) = "2048", (theqrl.zond.ext.cast_type) = "github.com/theQRL/go-bitfield.Bitlist"];
  AttestationData data = 2;
  // The difference of when attestation gets created and get included on chain.
  uint64 inclusion_delay = 3 [(theqrl.zond.ext.cast_type) = "github.com/theQRL/qrysm/v4/consensus-types/primitives.Slot"];
  // The proposer who included the attestation in the block.
  uint64 proposer_index = 4 [(theqrl.zond.ext.cast_type) = "github.com/theQRL/qrysm/v4/consensus-types/primitives.ValidatorIndex"];
}

message Committee {
  uint64 index = 1 [(theqrl.zond.ext.cast_type) = "github.com/theQRL/qrysm/v4/consensus-types/primitives.CommitteeIndex"];
  uint64 slot = 2 [(theqrl.zond.ext.cast_type) = "github.com/theQRL/qrysm/v4/consensus-types/primitives.Slot"];
  repeated uint64 validators = 3 [(theqrl.zond.ext.cast_type) = "github.com/theQRL/qrysm/v4/consensus-types/primitives.ValidatorIndex"];
}

// Fork structure used for indicating beacon chain versioning and forks.
message Fork {
  bytes previous_version = 1 [(theqrl.zond.ext.ssz_size) = "4"];
  bytes current_version = 2 [(theqrl.zond.ext.ssz_size) = "4"];
  uint64 epoch = 3 [(theqrl.zond.ext.cast_type) = "github.com/theQRL/qrysm/v4/consensus-types/primitives.Epoch"];
}

message ForkChoiceHeadsResponse {
  repeated ForkChoiceHead data = 1;
}

message ForkChoiceHead {
  bytes root = 1 [(theqrl.zond.ext.ssz_size) = "32"];
  uint64 slot = 2 [(theqrl.zond.ext.cast_type) = "github.com/theQRL/qrysm/v4/consensus-types/primitives.Slot"];
  bool execution_optimistic = 3;
}

message BeaconStateRequest {
  // The state id which can be any of: "head" (canonical head in node's view),
  // "genesis", "finalized", "justified", <slot>, <hex encoded stateRoot with 0x prefix>.
  bytes state_id = 1;
}

message BeaconStateResponse {
  Version version = 1;
  BeaconStateContainer data = 2;
  bool execution_optimistic = 3;
  bool finalized = 4;
}

message BeaconStateSSZResponse {
  Version version = 1;
  bytes data = 2;
}

message BeaconStateContainer {
  oneof state {
    BeaconState capella_state = 1;
  }
}

message RandaoRequest {
  bytes state_id = 1;
  optional uint64 epoch = 2 [(theqrl.zond.ext.cast_type) = "github.com/theQRL/qrysm/v4/consensus-types/primitives.Epoch"];
}

message RandaoResponse {
  Randao data = 1;
  bool execution_optimistic = 2;
  bool finalized = 3;

  message Randao {
    bytes randao = 1 [(theqrl.zond.ext.ssz_size) = "32"];
  }
}
