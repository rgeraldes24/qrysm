// Copyright 2021 Prysmatic Labs.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";

package theqrl.zond.v1;

import "google/protobuf/descriptor.proto";
import "proto/engine/v1/execution_engine.proto";
import "proto/zond/ext/options.proto";
import "proto/zond/v1/attestation.proto";
import "proto/zond/v1/withdrawals.proto";

option csharp_namespace = "TheQRL.Zond.V1";
option go_package = "github.com/theQRL/qrysm/v4/proto/zond/v1";
option java_multiple_files = true;
option java_outer_classname = "BeaconBlockProto";
option java_package = "org.theqrl.zond.v1";
option php_namespace = "TheQRL\\Zond\\v1";

// The Zond consensus beacon block. The message does not contain a validator signature.
message BeaconBlock {
  // Beacon chain slot that this block represents.
  uint64 slot = 1 [(theqrl.zond.ext.cast_type) = "github.com/theQRL/qrysm/v4/consensus-types/primitives.Slot"];

  // Validator index of the validator that proposed the block header.
  uint64 proposer_index = 2 [(theqrl.zond.ext.cast_type) = "github.com/theQRL/qrysm/v4/consensus-types/primitives.ValidatorIndex"];

  // 32 byte root of the parent block.
  bytes parent_root = 3 [(theqrl.zond.ext.ssz_size) = "32"];

  // 32 byte root of the resulting state after processing this block.
  bytes state_root = 4 [(theqrl.zond.ext.ssz_size) = "32"];

  // The block body itself.
  BeaconBlockBody body = 5;
}

// The Zond consensus beacon block. The message does not contain a validator signature.
message BlindedBeaconBlock {
  // Beacon chain slot that this block represents.
  uint64 slot = 1 [(theqrl.zond.ext.cast_type) = "github.com/theQRL/qrysm/v4/consensus-types/primitives.Slot"];

  // Validator index of the validator that proposed the block header.
  uint64 proposer_index = 2 [(theqrl.zond.ext.cast_type) = "github.com/theQRL/qrysm/v4/consensus-types/primitives.ValidatorIndex"];

  // 32 byte root of the parent block.
  bytes parent_root = 3 [(theqrl.zond.ext.ssz_size) = "32"];

  // 32 byte root of the resulting state after processing this block.
  bytes state_root = 4 [(theqrl.zond.ext.ssz_size) = "32"];

  // The block body itself.
  BlindedBeaconBlockBody body = 5;
}

message BeaconBlockContainer {
  oneof block {
    BeaconBlock capella_block = 1;
  }
}

message SignedBeaconBlockContainer {
  oneof message {
    BeaconBlock capella_block = 1;
  }

  // 4595 byte Dilithium signature from the validator that produced this block.
  bytes signature = 5 [(theqrl.zond.ext.ssz_size) = "4595"];
}

message BlindedBeaconBlockContainer {
  oneof block {
    BlindedBeaconBlock capella_block = 1;
  }
}

message SignedBlindedBeaconBlockContainer {
  oneof message {
    BlindedBeaconBlock capella_block = 1;
  }

  // 4595 byte Dilithium signature from the validator that produced this block.
  bytes signature = 5 [(theqrl.zond.ext.ssz_size) = "4595"];
}

// The signed version of beacon block.
message SignedBeaconBlock {
  BeaconBlock message = 1;

  // 4595 byte Dilithium signature from the validator that produced this block.
  bytes signature = 2 [(theqrl.zond.ext.ssz_size) = "4595"];
}

message SignedBlindedBeaconBlock {
  BlindedBeaconBlock message = 1;

  // 4595 byte Dilithium signature from the validator that produced this block.
  bytes signature = 2 [(theqrl.zond.ext.ssz_size) = "4595"];
}

message BeaconBlockBody {
  // The validators RANDAO reveal 4595 byte value.
  bytes randao_reveal = 1 [(theqrl.zond.ext.ssz_size) = "4595"];

  // A reference to the Zond 1.x chain.
  Zond1Data zond1_data = 2;

  // 32 byte field of arbitrary data. This field may contain any data and
  // is not used for anything other than a fun message.
  bytes graffiti = 3 [(theqrl.zond.ext.ssz_size) = "32"];

  // Block operations
  // Refer to spec constants at https://github.com/ethereum/consensus-specs/blob/dev/specs/core/0_beacon-chain.md#max-operations-per-block

  // At most MAX_PROPOSER_SLASHINGS.
  repeated ProposerSlashing proposer_slashings = 4 [(theqrl.zond.ext.ssz_max) = "16"];

  // At most MAX_ATTESTER_SLASHINGS.
  repeated AttesterSlashing attester_slashings = 5 [(theqrl.zond.ext.ssz_max) = "2"];

  // At most MAX_ATTESTATIONS.
  repeated Attestation attestations = 6 [(theqrl.zond.ext.ssz_max) = "128"];

  // At most MAX_DEPOSITS.
  repeated Deposit deposits = 7 [(theqrl.zond.ext.ssz_max) = "16"];

  // At most MAX_VOLUNTARY_EXITS.
  repeated SignedVoluntaryExit voluntary_exits = 8 [(theqrl.zond.ext.ssz_max) = "16"];

  // Sync aggregate object to track sync committee votes for light client support.
  SyncAggregate sync_aggregate = 9;

  // Execution payload: the embedded execution payload of the block
  theqrl.engine.v1.ExecutionPayload execution_payload = 10;

  // Dilithium To Execution Changes: signed messages to change withdrawal credentials
  repeated SignedDilithiumToExecutionChange dilithium_to_execution_changes = 11 [(theqrl.zond.ext.ssz_max) = "16"];
}

message BlindedBeaconBlockBody {
  // The validators RANDAO reveal 4595 byte value.
  bytes randao_reveal = 1 [(theqrl.zond.ext.ssz_size) = "4595"];

  // A reference to the Zond 1.x chain.
  Zond1Data zond1_data = 2;

  // 32 byte field of arbitrary data. This field may contain any data and
  // is not used for anything other than a fun message.
  bytes graffiti = 3 [(theqrl.zond.ext.ssz_size) = "32"];

  // Block operations
  // Refer to spec constants at https://github.com/ethereum/consensus-specs/blob/dev/specs/core/0_beacon-chain.md#max-operations-per-block

  // At most MAX_PROPOSER_SLASHINGS.
  repeated ProposerSlashing proposer_slashings = 4 [(theqrl.zond.ext.ssz_max) = "16"];

  // At most MAX_ATTESTER_SLASHINGS.
  repeated AttesterSlashing attester_slashings = 5 [(theqrl.zond.ext.ssz_max) = "2"];

  // At most MAX_ATTESTATIONS.
  repeated Attestation attestations = 6 [(theqrl.zond.ext.ssz_max) = "128"];

  // At most MAX_DEPOSITS.
  repeated Deposit deposits = 7 [(theqrl.zond.ext.ssz_max) = "16"];

  // At most MAX_VOLUNTARY_EXITS.
  repeated SignedVoluntaryExit voluntary_exits = 8 [(theqrl.zond.ext.ssz_max) = "16"];

  // Sync aggregate object to track sync committee votes for light client support.
  SyncAggregate sync_aggregate = 9;

  // Execution payload header: the embedded execution payload of the block 
  theqrl.engine.v1.ExecutionPayloadHeader execution_payload_header = 10;

  // Dilithium To Execution Changes: signed messages to change withdrawal credentials
  repeated SignedDilithiumToExecutionChange dilithium_to_execution_changes = 11 [(theqrl.zond.ext.ssz_max) = "16"];
}

// Proposer slashings are proofs that a slashable offense has been committed by
// proposing two conflicting blocks from the same validator.
message ProposerSlashing {
    // First conflicting signed block header.
    SignedBeaconBlockHeader signed_header_1 = 2;

    // Second conflicting signed block header.
    SignedBeaconBlockHeader signed_header_2 = 3;
}

// Attestor slashings are proofs that a slashable offense has been committed by
// attesting to two conflicting pieces of information by the same validator.
message AttesterSlashing {
    // First conflicting attestation.
    IndexedAttestation attestation_1 = 1;

    // Second conflicting attestation.
    IndexedAttestation attestation_2 = 2;
}

// Deposit into the Zond consensus from the Zond 1.x deposit contract.
message Deposit {
    message Data {
        // 2592 byte Dilithium public key of the validator.
        bytes pubkey = 1 [(theqrl.zond.ext.ssz_size) = "2592", (theqrl.zond.ext.spec_name) = "pubkey"];

        // A 32 byte hash of the withdrawal address public key.
        bytes withdrawal_credentials = 2 [(theqrl.zond.ext.ssz_size) = "32"];

        // Deposit amount in gwei.
        uint64 amount = 3;

        // 4595 byte signature from the validators public key.
        bytes signature = 4 [(theqrl.zond.ext.ssz_size) = "4595"];
    }

    // 32 byte roots in the deposit tree branch.
    repeated bytes proof = 1 [(theqrl.zond.ext.ssz_size) = "33,32"];

    Data data = 2;
}


// A message that represents a validator signaling that they want to voluntarily
// withdraw from the active validator set. The message does not contain a
// validator signature.
message VoluntaryExit {
    // The epoch on when exit request becomes valid.
    uint64 epoch = 1 [(theqrl.zond.ext.cast_type) = "github.com/theQRL/qrysm/v4/consensus-types/primitives.Epoch"];

    // Index of the exiting validator.
    uint64 validator_index = 2 [(theqrl.zond.ext.cast_type) = "github.com/theQRL/qrysm/v4/consensus-types/primitives.ValidatorIndex"];
}

// The signed version of voluntary exit.
message SignedVoluntaryExit {
    // The unsigned voluntary exit itself.
    VoluntaryExit message = 1;

    // Validator's 4595 byte signature
    bytes signature = 2 [(theqrl.zond.ext.ssz_size) = "4595"];
}

// Zond1Data represents references to the Zond 1.x deposit contract.
message Zond1Data {
    // The 32 byte deposit tree root for the last deposit included in this
    // block.
    bytes deposit_root = 1 [(theqrl.zond.ext.ssz_size) = "32"];

    // The total number of deposits included in the beacon chain since genesis
    // including the deposits in this block.
    uint64 deposit_count = 2;

    // The 32 byte block hash of the Zond 1.x block considered for deposit
    // inclusion.
    bytes block_hash = 3 [(theqrl.zond.ext.ssz_size) = "32"];
}

// A beacon block header is essentially a beacon block with only a reference to
// the beacon body as a 32 byte merkle tree root. This type of message is more
// lightweight than a full beacon block. The message does not contain
// a validator signature.
message BeaconBlockHeader {
    // Beacon chain slot that this block represents.
    uint64 slot = 1 [(theqrl.zond.ext.cast_type) = "github.com/theQRL/qrysm/v4/consensus-types/primitives.Slot"];

    // Validator index of the validator that proposed the block header.
    uint64 proposer_index = 2 [(theqrl.zond.ext.cast_type) = "github.com/theQRL/qrysm/v4/consensus-types/primitives.ValidatorIndex"];

    // 32 byte merkle tree root of the parent ssz encoded block.
    bytes parent_root = 3 [(theqrl.zond.ext.ssz_size) = "32"];

    // 32 byte merkle tree root of the resulting ssz encoded state after processing this block.
    bytes state_root = 4 [(theqrl.zond.ext.ssz_size) = "32"];

    // 32 byte merkle tree root of the ssz encoded block body.
    bytes body_root = 5 [(theqrl.zond.ext.ssz_size) = "32"];
}

message SignedBeaconBlockHeader {
    // The unsigned beacon block header itself.
    BeaconBlockHeader message = 1;

    // 4595 byte Dilithium signature from the validator that produced this block header.
    bytes signature = 2 [(theqrl.zond.ext.ssz_size) = "4595"];
}

message IndexedAttestation {
    repeated uint64 attesting_indices = 1 [(theqrl.zond.ext.ssz_max) = "128"];

    AttestationData data = 2;

    repeated bytes signatures = 3 [(theqrl.zond.ext.ssz_size) = "?,4595", (theqrl.zond.ext.ssz_max) = "128"];
}

// The sync aggregate object for the beacon chain to track sync committee votes and to
// support light client infra.
message SyncAggregate {
    // Sync committee bits as Bitvector to track votes.
    bytes sync_committee_bits = 1 [(theqrl.zond.ext.ssz_size) = "sync_committee_bytes.size", (theqrl.zond.ext.cast_type) = "sync_committee_bits.type"];

    // Dilithium signatures of the sync committee for the ones that voted.
    repeated bytes sync_committee_signatures = 2 [(theqrl.zond.ext.ssz_size) = "?,4595", (theqrl.zond.ext.ssz_max) = "sync_committee_bits.size"];
}