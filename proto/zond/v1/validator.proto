// Copyright 2020 Prysmatic Labs.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";

package theqrl.zond.v1;

import "google/protobuf/descriptor.proto";

import "proto/zond/ext/options.proto";
import "proto/zond/v1/attestation.proto";
import "proto/zond/v1/beacon_block.proto";
import "proto/zond/v1/version.proto";

option csharp_namespace = "TheQRL.Zond.V1";
option go_package = "github.com/theQRL/qrysm/v4/proto/zond/v1";
option java_multiple_files = true;
option java_outer_classname = "ValidatorProto";
option java_package = "org.theqrl.zond.v1";
option php_namespace = "TheQRL\\Zond\\v1";

message ValidatorContainer {
    uint64 index = 1 [(theqrl.zond.ext.cast_type) = "github.com/theQRL/qrysm/v4/consensus-types/primitives.ValidatorIndex"];
    uint64 balance = 2;
    ValidatorStatus status = 3;
    Validator validator = 4;
}

// A Zond validator.
message Validator {
    // 2592 byte Dilithium public key used for the validator's activities.
    bytes pubkey = 1 [(theqrl.zond.ext.ssz_size) = "2592", (theqrl.zond.ext.spec_name) = "pubkey"];

    // 32 byte hash of the withdrawal destination public key.
    bytes withdrawal_credentials = 2 [(theqrl.zond.ext.ssz_size) = "32"];

    // The validators current effective balance in gwei.
    uint64 effective_balance = 3;

    // Whether or not the validator has been slashed.
    bool slashed = 4;

    // Epoch when the validator became eligible for activation. This field may
    // be zero if the validator was present in the Zond proof of stake genesis. This
    // field is FAR_FUTURE_EPOCH if the validator has not been activated.
    uint64 activation_eligibility_epoch = 5 [(theqrl.zond.ext.cast_type) = "github.com/theQRL/qrysm/v4/consensus-types/primitives.Epoch"];

    // Epoch when the validator was activated. This field may be zero if the
    // validator was present in the Zond proof of stake genesis. This field is
    // FAR_FUTURE_EPOCH if the validator has not been activated.
    uint64 activation_epoch = 6 [(theqrl.zond.ext.cast_type) = "github.com/theQRL/qrysm/v4/consensus-types/primitives.Epoch"];

    // Epoch when the validator was exited. This field is FAR_FUTURE_EPOCH if
    // the validator has not exited.
    // FAR_FUTURE_EPOCH is a constant defined by the official Zond Beacon Chain specification:
    // https://github.com/ethereum/consensus-specs/blob/v0.9.2/specs/core/0_beacon-chain.md#constants
    uint64 exit_epoch = 7 [(theqrl.zond.ext.cast_type) = "github.com/theQRL/qrysm/v4/consensus-types/primitives.Epoch"];

    // Epoch when the validator is eligible to withdraw their funds. This field
    // is FAR_FUTURE_EPOCH if the validator has not exited.
    // FAR_FUTURE_EPOCH is a constant defined by the official Zond1Data Beacon Chain specification:
    // https://github.com/ethereum/consensus-specs/blob/v0.9.2/specs/core/0_beacon-chain.md#constants
    uint64 withdrawable_epoch = 8 [(theqrl.zond.ext.cast_type) = "github.com/theQRL/qrysm/v4/consensus-types/primitives.Epoch"];
}

enum ValidatorStatus {
    PENDING_INITIALIZED  = 0;
    PENDING_QUEUED = 1;
    ACTIVE_ONGOING = 2;
    ACTIVE_EXITING = 3;
    ACTIVE_SLASHED = 4;
    EXITED_UNSLASHED = 5;
    EXITED_SLASHED = 6;
    WITHDRAWAL_POSSIBLE = 7;
    WITHDRAWAL_DONE = 8;
    ACTIVE = 9;
    PENDING = 10;
    EXITED = 11;
    WITHDRAWAL = 12;
}

message AttesterDutiesRequest {
    // Epoch to request, should only be allowed 1 epoch ahead.
    uint64 epoch = 1 [(theqrl.zond.ext.cast_type) = "github.com/theQRL/qrysm/v4/consensus-types/primitives.Epoch"];

    // Validator indices to request duties for.
    repeated uint64 index = 2 [(theqrl.zond.ext.cast_type) = "github.com/theQRL/qrysm/v4/consensus-types/primitives.ValidatorIndex"];
}

message AttesterDutiesResponse {
    bytes dependent_root = 1 [(theqrl.zond.ext.ssz_size) = "32"];
    repeated AttesterDuty data = 2;
    bool execution_optimistic = 3;
}

message AttesterDuty {
    // 2592 byte Dilithium public key for the validator who's assigned to perform a duty.
    bytes pubkey = 1 [(theqrl.zond.ext.ssz_size) = "2592"];

    // The index of the validator in the beacon state.
    uint64 validator_index = 2 [(theqrl.zond.ext.cast_type) = "github.com/theQRL/qrysm/v4/consensus-types/primitives.ValidatorIndex"];

    // The index of the committee where the validator belongs to.
    uint64 committee_index = 3  [(theqrl.zond.ext.cast_type) = "github.com/theQRL/qrysm/v4/consensus-types/primitives.CommitteeIndex"];

    // The length of the committee the validator belongs to.
    uint64 committee_length = 4;

    // The total amount of committees for this slot.
    uint64 committees_at_slot = 5;

    // The index of the validator in the committee.
    uint64 validator_committee_index = 6  [(theqrl.zond.ext.cast_type) = "github.com/theQRL/qrysm/v4/consensus-types/primitives.CommitteeIndex"];

    // The slot this duty is for.
    uint64 slot = 7 [(theqrl.zond.ext.cast_type) = "github.com/theQRL/qrysm/v4/consensus-types/primitives.Slot"];
}

message ProposerDutiesRequest {
    // Epoch to request duties for.
    uint64 epoch = 1 [(theqrl.zond.ext.cast_type) = "github.com/theQRL/qrysm/v4/consensus-types/primitives.Epoch"];
}

message ProposerDutiesResponse {
    bytes dependent_root = 1 [(theqrl.zond.ext.ssz_size) = "32"];
    repeated ProposerDuty data = 2;
    bool execution_optimistic = 3;
}

message ProposerDuty {
    // 2592 byte Dilithium public key for the validator who's assigned to perform a duty.
    bytes pubkey = 1 [(theqrl.zond.ext.ssz_size) = "2592"];

    // The index of the validator in the beacon state.
    uint64 validator_index = 2 [(theqrl.zond.ext.cast_type) = "github.com/theQRL/qrysm/v4/consensus-types/primitives.ValidatorIndex"];

    // The slot this duty is for.
    uint64 slot = 3 [(theqrl.zond.ext.cast_type) = "github.com/theQRL/qrysm/v4/consensus-types/primitives.Slot"];
}

message ProduceBlockRequest {
    // The slot to request a block for.
    uint64 slot = 1 [(theqrl.zond.ext.cast_type) = "github.com/theQRL/qrysm/v4/consensus-types/primitives.Slot"];

    // The validators RANDAO reveal 4595 byte value.
    bytes randao_reveal = 2 [(theqrl.zond.ext.ssz_size) = "4595"];

    // 32 byte field of arbitrary data. This field may contain any data and
    // is not used for anything other than a fun message.
    optional bytes graffiti = 3 [(theqrl.zond.ext.ssz_size) = "32"];
}

message ProduceBlockResponse {
  Version version = 1;
  BeaconBlockContainer data = 2;
}

message ProduceBlindedBlockResponse {
  Version version = 1;
  BlindedBeaconBlockContainer data = 2;
}

message ProduceAttestationDataRequest {
    // Slot for which the attestation data should be retrieved for.
    uint64 slot = 1 [(theqrl.zond.ext.cast_type) = "github.com/theQRL/qrysm/v4/consensus-types/primitives.Slot"];

    // Committee index for which the attestation data should be retrieved for.
    uint64 committee_index = 2  [(theqrl.zond.ext.cast_type) = "github.com/theQRL/qrysm/v4/consensus-types/primitives.CommitteeIndex"];
}

message ProduceAttestationDataResponse {
    AttestationData data = 1;
}

message SubmitBeaconCommitteeSubscriptionsRequest {
    repeated BeaconCommitteeSubscribe data = 1;
}

message BeaconCommitteeSubscribe {
    // The validator index to subscribe for.
    uint64 validator_index = 1 [(theqrl.zond.ext.cast_type) = "github.com/theQRL/qrysm/v4/consensus-types/primitives.ValidatorIndex"];

    // The committee index to be subscribed to.
    uint64 committee_index = 2  [(theqrl.zond.ext.cast_type) = "github.com/theQRL/qrysm/v4/consensus-types/primitives.CommitteeIndex"];

    // The total amount of committees for the given slot.
    uint64 committees_at_slot = 3;

    // The slot to be subscribed to.
    uint64 slot = 4 [(theqrl.zond.ext.cast_type) = "github.com/theQRL/qrysm/v4/consensus-types/primitives.Slot"];

    // If subscribing for aggregator, the beacon node will aggregate all attestations received.
    bool is_aggregator = 5;
}

message PrepareBeaconProposerRequest {
    message FeeRecipientContainer {
        // The address of the fee recipient.
        bytes fee_recipient = 1 [(theqrl.zond.ext.ssz_size) = "20"];

        // The proposer validator index.
        uint64 validator_index = 2 [(theqrl.zond.ext.cast_type) = "github.com/theQRL/qrysm/v4/consensus-types/primitives.ValidatorIndex"];
    }
    repeated FeeRecipientContainer recipients = 1;
}

message SubmitValidatorRegistrationsRequest {
    message ValidatorRegistration {
        // The address of the fee recipient.
        bytes fee_recipient = 1 [(theqrl.zond.ext.ssz_size) = "20"];
        // gas_limit value in gwei
        uint64 gas_limit = 2;
        // timestamp in utc seconds from unix epoch
        uint64 timestamp = 3;
        // validator public key
        bytes pubkey = 4 [(theqrl.zond.ext.ssz_size) = "2592"];
    }

    message SignedValidatorRegistration {
        ValidatorRegistration message = 1;
        // signature of ValidatorRegistration
        bytes signature = 2 [(theqrl.zond.ext.ssz_size) = "4595"];
    }

    repeated SignedValidatorRegistration registrations = 1;
}

message SyncCommitteeDutiesRequest {
  // Must fulfill: epoch // EPOCHS_PER_SYNC_COMMITTEE_PERIOD <= current_epoch // EPOCHS_PER_SYNC_COMMITTEE_PERIOD + 1
  uint64 epoch = 1 [(theqrl.zond.ext.cast_type) = "github.com/theQRL/qrysm/v4/consensus-types/primitives.Epoch"];

  // Validator indices to request duties for.
  repeated uint64 index = 2 [(theqrl.zond.ext.cast_type) = "github.com/theQRL/qrysm/v4/consensus-types/primitives.ValidatorIndex"];
}

message SyncCommitteeDutiesResponse {
  repeated SyncCommitteeDuty data = 1;
  bool execution_optimistic = 2;
}

message SyncCommitteeDuty {
  // The validator's Dilithium public key, uniquely identifying them.
  bytes pubkey = 1 [(theqrl.zond.ext.ssz_size) = "2592"];

  // Index of validator in validator registry.
  uint64 validator_index = 2 [(theqrl.zond.ext.cast_type) = "github.com/theQRL/qrysm/v4/consensus-types/primitives.ValidatorIndex"];

  // The indices of the validator in the sync committee.
  repeated uint64 validator_sync_committee_indices = 3;
}

message SubmitSyncCommitteeSubscriptionsRequest {
  repeated SyncCommitteeSubscription data = 1;
}

message SyncCommitteeSubscription {
  // The validator index to subscribe for.
  uint64 validator_index = 1 [(theqrl.zond.ext.cast_type) = "github.com/theQRL/qrysm/v4/consensus-types/primitives.ValidatorIndex"];

  // The sync committee indices to be subscribed to.
  repeated uint64 sync_committee_indices = 2;

  // The final epoch (exclusive value) that the specified validator requires the subscription for.
  uint64 until_epoch = 3 [(theqrl.zond.ext.cast_type) = "github.com/theQRL/qrysm/v4/consensus-types/primitives.Epoch"];
}

message ProduceSyncCommitteeContributionRequest {
  // The slot for which a sync committee contribution should be created.
  uint64 slot = 1 [(theqrl.zond.ext.cast_type) = "github.com/theQRL/qrysm/v4/consensus-types/primitives.Slot"];

  // The subcommittee index for which to produce the contribution.
  uint64 subcommittee_index = 2;

  // The block root for which to produce the contribution.
  bytes beacon_block_root = 3 [(theqrl.zond.ext.ssz_size) = "32"];
}

message ProduceSyncCommitteeContributionResponse {
  SyncCommitteeContribution data = 1;
}

// Aggregated sync committee object to support light client.
message SyncCommitteeContribution {
  // Slot to which this contribution pertains.
  uint64 slot = 1 [(theqrl.zond.ext.cast_type) = "github.com/theQRL/qrysm/v4/consensus-types/primitives.Slot"];

  // 32 byte block root for this signature.
  bytes beacon_block_root = 2 [(theqrl.zond.ext.ssz_size) = "32"];

  // The subcommittee this contribution pertains to out of the broader sync committee.
  uint64 subcommittee_index = 3;

  // A bit is set if a signature from the validator at the corresponding
  // index in the subcommittee is present in the aggregate `signature`.
  bytes participation_bits = 4 [(theqrl.zond.ext.ssz_size) = "sync_committee_participation_bytes.size", (theqrl.zond.ext.cast_type) = "sync_committee_participation_bits.type"];

  // Signature by the validator(s) over the block root of `slot`.
  repeated bytes signatures = 5 [(theqrl.zond.ext.ssz_size) = "?,4595", (theqrl.zond.ext.ssz_max) = "16"];
}

// Aggregated sync committee signature object with selection proof to support light client.
message ContributionAndProof {
  // Index of the aggregator that produced this proof.
  uint64 aggregator_index = 1 [(theqrl.zond.ext.cast_type) = "github.com/theQRL/qrysm/v4/consensus-types/primitives.ValidatorIndex"];

  SyncCommitteeContribution contribution = 2;

  // The selection proof itself.
  bytes selection_proof = 3 [(theqrl.zond.ext.ssz_size) = "4595"];
}

// Signed aggregated sync committee signature object with selection proof to support light client.
message SignedContributionAndProof {
  ContributionAndProof message = 1;

  // Signature of the aggregator that produced `message`.
  bytes signature = 2 [(theqrl.zond.ext.ssz_size) = "4595"];
}

message GetLivenessRequest {
  uint64 epoch = 1 [(theqrl.zond.ext.cast_type) = "github.com/theQRL/qrysm/v4/consensus-types/primitives.Epoch"];
  repeated uint64 index = 2 [(theqrl.zond.ext.cast_type) = "github.com/theQRL/qrysm/v4/consensus-types/primitives.ValidatorIndex"];
}

message GetLivenessResponse {
  repeated Liveness data = 1;

  message Liveness {
    uint64 index = 1 [(theqrl.zond.ext.cast_type) = "github.com/theQRL/qrysm/v4/consensus-types/primitives.ValidatorIndex"];
    bool is_live = 2;
  }
}
