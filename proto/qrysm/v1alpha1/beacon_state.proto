syntax = "proto3";

package theqrl.zond.v1alpha1;

import "proto/qrysm/v1alpha1/attestation.proto";
import "proto/qrysm/v1alpha1/beacon_block.proto";
import "proto/qrysm/v1alpha1/validator.proto";
import "proto/engine/v1/execution_engine.proto";
import "proto/zond/ext/options.proto";

option csharp_namespace = "TheQRL.Zond.V1Alpha1";
option go_package = "github.com/theQRL/qrysm/v4/proto/qrysm/v1alpha1;zond";
option java_multiple_files = true;
option java_outer_classname = "BeaconStateProto";
option java_package = "org.theqrl.zond.v1alpha1";
option php_namespace = "TheQRL\\Zond\\v1alpha1";

message BeaconState {
  // Versioning [1001-2000]
  uint64 genesis_time = 1001;
  bytes genesis_validators_root = 1002 [(theqrl.zond.ext.ssz_size) = "32"];
  uint64 slot = 1003 [(theqrl.zond.ext.cast_type) = "github.com/theQRL/qrysm/v4/consensus-types/primitives.Slot"];
  Fork fork = 1004;

  // History [2001-3000]
  BeaconBlockHeader latest_block_header = 2001;
  repeated bytes block_roots = 2002 [(theqrl.zond.ext.ssz_size) = "block_roots.size"];
  repeated bytes state_roots = 2003 [(theqrl.zond.ext.ssz_size) = "state_roots.size"];
  repeated bytes historical_roots = 2004 [(theqrl.zond.ext.ssz_size) = "?,32", (theqrl.zond.ext.ssz_max)  = "16777216"];

  // Zond1 [3001-4000]
  Zond1Data zond1_data = 3001;
  repeated Zond1Data zond1_data_votes = 3002 [(theqrl.zond.ext.ssz_max) = "zond1_data_votes.size"];
  uint64 zond1_deposit_index = 3003;

  // Registry [4001-5000]
  repeated Validator validators = 4001 [(theqrl.zond.ext.ssz_max) = "1099511627776"];
  repeated uint64 balances = 4002 [(theqrl.zond.ext.ssz_max) = "1099511627776"];

  // Randomness [5001-6000]
  repeated bytes randao_mixes = 5001 [(theqrl.zond.ext.ssz_size) = "randao_mixes.size"];

  // Slashings [6001-7000]
  repeated uint64 slashings = 6001 [(theqrl.zond.ext.ssz_size) = "slashings.size"];

  // Participation [7001-8000]
  bytes previous_epoch_participation = 7001 [(theqrl.zond.ext.ssz_max) = "1099511627776"];
  bytes current_epoch_participation = 7002 [(theqrl.zond.ext.ssz_max) = "1099511627776"];

  // Finality [8001-9000]
  // Spec type [4]Bitvector which means this would be a fixed size of 4 bits.
  bytes justification_bits = 8001 [(theqrl.zond.ext.ssz_size) = "1", (theqrl.zond.ext.cast_type) = "github.com/theQRL/go-bitfield.Bitvector4"];
  Checkpoint previous_justified_checkpoint = 8002;
  Checkpoint current_justified_checkpoint = 8003;
  Checkpoint finalized_checkpoint = 8004;

  // Sync fields [9001-10000]
  repeated uint64 inactivity_scores = 9001 [(theqrl.zond.ext.ssz_max) = "1099511627776"];
  SyncCommittee current_sync_committee = 9002;
  SyncCommittee next_sync_committee = 9003; 

  // Execution fields [10001-11000]
  theqrl.engine.v1.ExecutionPayloadHeader latest_execution_payload_header = 10001;

  // Capella fields [11001-12000]
  uint64 next_withdrawal_index = 11001; // [New in Capella]
  uint64 next_withdrawal_validator_index = 11002 [(theqrl.zond.ext.cast_type) = "github.com/theQRL/qrysm/v4/consensus-types/primitives.ValidatorIndex"];
  repeated HistoricalSummary historical_summaries = 11003 [(theqrl.zond.ext.ssz_max) = "16777216"]; 
}

message Fork {
  bytes previous_version = 1 [(theqrl.zond.ext.ssz_size) = "4"];
  bytes current_version = 2 [(theqrl.zond.ext.ssz_size) = "4"];
  uint64 epoch = 3 [(theqrl.zond.ext.cast_type) = "github.com/theQRL/qrysm/v4/consensus-types/primitives.Epoch"];
}

message PendingAttestation {
  // Bitfield representation of validator indices that have voted exactly
  // the same vote and have been included into this attestation.
  bytes participation_bits = 1 [(theqrl.zond.ext.ssz_max) = "2048", (theqrl.zond.ext.cast_type) = "github.com/theQRL/go-bitfield.Bitlist"];
  AttestationData data = 2;
  // The difference of when attestation gets created and get included on chain.
  uint64 inclusion_delay = 3 [(theqrl.zond.ext.cast_type) = "github.com/theQRL/qrysm/v4/consensus-types/primitives.Slot"];
  // The proposer who included the attestation in the block.
  uint64 proposer_index = 4 [(theqrl.zond.ext.cast_type) = "github.com/theQRL/qrysm/v4/consensus-types/primitives.ValidatorIndex"];
}

message HistoricalBatch {
  repeated bytes block_roots = 1 [(theqrl.zond.ext.ssz_size) = "block_roots.size"];
  repeated bytes state_roots = 2 [(theqrl.zond.ext.ssz_size) = "state_roots.size"];
}

// The state summary object is defined for summarizing a state
// of a given slot. The summary facilitates regeneration of a
// specific state to allow easy playback using pre-saved state
// and blocks.
message StateSummary {
  // The slot of the state.
  uint64 slot = 1 [(theqrl.zond.ext.cast_type) = "github.com/theQRL/qrysm/v4/consensus-types/primitives.Slot"];
  // The block root of the state.
  bytes root = 2;
}

message SigningData {
  // The root of the object being signed.
  bytes object_root = 1 [(theqrl.zond.ext.ssz_size) = "32"];
  // The domain for the particular object being signed.
  bytes domain = 2 [(theqrl.zond.ext.ssz_size) = "32"];
}

message ForkData {
  // The current version of the fork.
  bytes current_version = 4 [(theqrl.zond.ext.ssz_size) = "4"];
  // The genesis validators root of the fork.
  bytes genesis_validators_root = 2 [(theqrl.zond.ext.ssz_size) = "32"];
}

message CheckPtInfo {
  // The randao seed which the check point refers to, this will be used to retrieve shuffled indices.
  bytes seed = 1;
  // The genesis root which the check point refers to. This ensures same seed can't happen on different chain.
  bytes genesis_root = 2;
  // Validators that were active at that check point.
  repeated uint64 active_indices = 3;
  // Validators public keys at that check point.
  repeated bytes pub_keys = 4;
  // The fork data at that check point. This will be used to verify signatures.
  Fork fork = 5;
}

// DepositMessage serves as a subset of deposit data in order to derive the signing root.
message DepositMessage {
  // 2592 byte Dilithium public key of the validator.
  bytes public_key = 1 [(theqrl.zond.ext.ssz_size) = "2592", (theqrl.zond.ext.spec_name) = "pubkey"];

  // A 32 byte hash of the withdrawal address public key.
  bytes withdrawal_credentials = 2 [(theqrl.zond.ext.ssz_size) = "32"];

  // Deposit amount in gwei.
  uint64 amount = 3;
}

// SyncCommittee serves as committees to facilitate light client syncing to beacon chain.
message SyncCommittee {
  repeated bytes pubkeys = 1  [(theqrl.zond.ext.ssz_size) = "sync_committee_bits.size,2592"];
}

// SyncAggregatorSelectionData is used to sign over and then check whether the aggregator is selected within a subcommittee.
message SyncAggregatorSelectionData {
  // Slot of this signing data.
  uint64 slot = 1 [(theqrl.zond.ext.cast_type) = "github.com/theQRL/qrysm/v4/consensus-types/primitives.Slot"];
  // Subcommittee index of this signing data.
  uint64 subcommittee_index = 2;
}

// TODO(rgeraldes24) - necessary?
// PowBlock is a definition from Bellatrix fork choice spec to represent a block with total difficulty in the PoW chain.
// Spec:
// class PowBlock(Container):
//    block_hash: Hash32
//    parent_hash: Hash32
//    total_difficulty: uint256
message PowBlock {
  bytes block_hash = 1 [(theqrl.zond.ext.ssz_size) = "32"];
  bytes parent_hash = 2 [(theqrl.zond.ext.ssz_size) = "32"];
  bytes total_difficulty = 3 [(theqrl.zond.ext.ssz_size) = "32"];
}

// HistoricalSummary matches the components of the phase0 `HistoricalBatch` making the two hash_tree_root-compatible.
message HistoricalSummary {
  bytes block_summary_root = 1 [(theqrl.zond.ext.ssz_size) = "32"];
  bytes state_summary_root = 2 [(theqrl.zond.ext.ssz_size) = "32"];
}